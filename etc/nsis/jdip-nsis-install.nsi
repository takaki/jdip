; Script generated by the HM NIS Edit Script Wizard.
; modified heavily by Zach DelProposto
; 

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "jDip"
!define PRODUCT_VERSION "1.7.0"
!define PRODUCT_WEB_SITE "http://jdip.sourceforge.net"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

SetCompressor lzma
SetCompressorDictSize 32
SetDatablockOptimize on

; MUI 1.67 compatible ------
!include "MUI.nsh"

; MUI Settings
!define MUI_WARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; Custom page : Java version check / install
Page custom JavaVersionCheck
; License page
!insertmacro MUI_PAGE_LICENSE "install_license.txt"
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; Reserve files
; requires for all install-options files.... (for LZMA / bzip2)
ReserveFile "install-option-javacheck.ini"
ReserveFile "jre-1_5_0_03-windows-i586-p-iftw.exe" ;JAVA_INSTALLER
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS

; MUI end ------
Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "..\..\build\packages\jdip-${PRODUCT_VERSION}-setup.exe"
InstallDir "$PROGRAMFILES\jDip"
ShowInstDetails show
ShowUnInstDetails show

Section "MainSection" SEC01
  ; root dir
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
  File "..\..\build\jardist\jdip.exe"		; THIS MUST BE CREATED with launch4j
  File "..\..\build\jardist\HISTORY.TXT"
  File "..\..\build\jardist\CHANGELOG.TXT"
  File "..\..\build\jardist\README.TXT"
  File "..\..\build\jardist\LICENSE.TXT"
  File "..\..\build\jardist\jdip.jar"
  ; lib dir
  File /r "..\..\build\jardist\lib" 
  ; variants dir
  File /r "..\..\build\jardist\variants" 
  ; plugins dir (empty)
  CreateDirectory "$INSTDIR\plugins"  
SectionEnd

Section -AdditionalIcons
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateDirectory "$SMPROGRAMS\jDip"
  CreateShortCut "$SMPROGRAMS\jDip\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "$SMPROGRAMS\jDip\jDip.lnk" "$INSTDIR\jDip.exe" 
SectionEnd                        

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
SectionEnd

Function .onInit
  ;Extract InstallOptions INI files
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "install-option-javacheck.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "jre-1_5_0_03-windows-i586-p-iftw.exe"
FunctionEnd


Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
FunctionEnd

Section Uninstall
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\jdip.jar"
  Delete "$INSTDIR\jdip.exe"
  Delete "$INSTDIR\LICENSE.TXT"
  Delete "$INSTDIR\README.TXT"
  Delete "$INSTDIR\CHANGELOG.TXT"
  Delete "$INSTDIR\HISTORY.TXT"
  Delete "$INSTDIR\jdip.bat"

  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\lib"
  RMDir /r "$INSTDIR\variants"

  Delete "$SMPROGRAMS\jDip\Uninstall.lnk"
  Delete "$SMPROGRAMS\jDip\Website.lnk"
  Delete "$SMPROGRAMS\jDip\jDip.lnk"

  RMDir "$SMPROGRAMS\jDip"
  RMDir "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  SetAutoClose true
SectionEnd


; Custom pages
LangString TEXT_IO_TITLE ${LANG_ENGLISH} "Analyzing System"
LangString TEXT_IO_SUBTITLE ${LANG_ENGLISH} "Checks that the required version of Java is installed."
LangString TEXT_JAVA_REQUIRED ${LANG_ENGLISH} "jDip requires that Java is installed or requires a newer \
 version than is currently installed. $\n$\nTo download the most current version of Java, select Yes below.$\n \
 Note that the download size may be upto 15 MB."
LangString TEXT_JAVA_OPTIONAL ${LANG_ENGLISH} "While jDip will run with the version of Java detected on your \
 computer, a newer version of Java is available.$\nUpdating requires a 2 to 15 MB download. $\n$\nWould you like \
 to update?"

Function JavaVersionCheck
  !insertmacro MUI_HEADER_TEXT "$(TEXT_IO_TITLE)" "$(TEXT_IO_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "ioA.ini"             ; should say 'analyzing system...' or something
  call GetJavaVersion
  pop $0 ; major version
  pop $1 ; minor version
  pop $2 ; micro version
  pop $3 ; build/update version
  DetailPrint "Java Version: $0.$1.$2_$3" 
  ;Messagebox MB_OK "Done checking JRE version: $0.$1.$2_$3"
  
  ; no java installed
  IntCmp $0 0 needJava
  
  ; 1.4.2 is minimum required version. if less, we NEED java. if >=, it's optional or not required. 
  IntCmp $1 4 mayNeedJava needJava currentJava
  mayNeedJava:
        ; == 2 is ok, but may want to update
        ; < 2 : need java update
        ; > 2 : optional update
        IntCmp $2 2 optionalJava needJava optionalJava 
  needJava:
        Messagebox MB_YESNO $(TEXT_JAVA_REQUIRED) IDYES neededJavaInstall IDNO refuseJava
        goto done 
  optionalJava:
        Messagebox MB_YESNO $(TEXT_JAVA_OPTIONAL) IDYES installJava IDNO done
        goto done
  currentJava:
        DetailPrint "Java version acceptable"
        goto done
  refuseJava:
        ; java needed, but refused. abort.
        MessageBox MB_OK  "jDip cannot be installed unless Java version 1.4.2 or higher has been installed."
        Quit
  neededJavaInstall:
        ; java needed. if install fails, abort.
        ExecWait '"jre-1_5_0_03-windows-i586-p-iftw.exe"' $0
        IntCmp $0 done badInstallAbort badInstallAbort
        goto done
  installJava:
        ; java desired. if install fails, continue
        ExecWait '"jre-1_5_0_03-windows-i586-p-iftw.exe"' $0
        IntCmp $0 done badInstall badInstall
        goto done
  badInstallAbort:
        MessageBox MB_OK "Java installation failed; jDip cannot be installed. Please uninstall Java and try again."
        Quit
  badInstall:
        MessageBox MB_OK "Java could not be updated to the most current version."
        ; fall thru
  done:
FunctionEnd





;----------------------------------------------------------------------------
; by pyropunk
; from http://nsis.sourceforge.net/archive/viewpage.php?pageid=572
; Find installed java version and return major, minor, micro and build/update
; version. For some reason v1.2.1_004 did not give a build version, but it's the only
; There are 3 ways to get the build version:
;   1) from the UpdateVersion key
;   2) or from the MicroVersion key
;   3) or from the JavaHome key
;example
;  call GetJavaVersion
;  pop $0 ; major version
;  pop $1 ; minor version
;  pop $2 ; micro version
;  pop $3 ; build/update version
;  strcmp $0 "no" JavaNotInstalled
;  strcmp $3 "" nobuild
;  DetailPrint "$0.$1.$2_$3"
;  goto fin
;nobuild:
;  DetailPrint "$0.$1.$2"
;  goto fin
;JavaNotInstalled:
;  DetailPrint "Java Not Installed"
;fin:
Function GetJavaVersion
  push $R0
  push $R1
  push $2
  push $0
  push $3
  push $4
  
  ReadRegStr $2 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment" "CurrentVersion"
  StrCmp $2 "" DetectTry2
  ReadRegStr $3 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment\$2" "MicroVersion"
  StrCmp $3 "" DetectTry2
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment\$2" "UpdateVersion"
  StrCmp $4 "" 0 GotFromUpdate
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment\$2" "JavaHome"
  Goto GotJRE
DetectTry2:
  ReadRegStr $2 HKLM "SOFTWARE\JavaSoft\Java Development Kit" "CurrentVersion"
  StrCmp $2 "" NoFound
  ReadRegStr $3 HKLM "SOFTWARE\JavaSoft\Java Development Kit\$2" "MicroVersion"
  StrCmp $3 "" NoFound
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Development Kit\$2" "UpdateVersion"
  StrCmp $4 "" 0 GotFromUpdate
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Development Kit\$2" "JavaHome"
GotJRE:
  ; calc build version
  strlen $0 $3
  intcmp $0 1 0 0 GetFromMicro
  ; get it from the path
GetFromPath:
  strlen $R0 $4
  intop $R0 $R0 - 1
  StrCpy $0 ""
loopP:
  StrCpy $R1 $4 1 $R0
  StrCmp $R1 "" DotFoundP
  StrCmp $R1 "_" UScoreFound
  StrCmp $R1 "." DotFoundP
  StrCpy $0 "$R1$0"
  Goto GoLoopingP
DotFoundP:
  push ""
  Exch 6
  goto CalcMicro
UScoreFound:
  push $0
  Exch 6
  goto CalcMicro
GoLoopingP:
  intcmp $R0 0 DotFoundP DotFoundP
  IntOp $R0 $R0 - 1
  Goto loopP
GetFromMicro:
  strcpy $4 $3
  goto GetFromPath
GotFromUpdate:
  push $4
  Exch 6

CalcMicro:
  Push $3 ; micro
  Exch 6
  ; break version into major and minor
  StrCpy $R0 0
  StrCpy $0 ""
loop:
  StrCpy $R1 $2 1 $R0
  StrCmp $R1 "" done
  StrCmp $R1 "." DotFound
  StrCpy $0 "$0$R1"
  Goto GoLooping
DotFound:
  Push $0 ; major
  Exch 5
  StrCpy $0 ""
GoLooping:
  IntOp $R0 $R0 + 1
  Goto loop

done:
  Push $0 ; minor
  Exch 7
  ; restore register values
  pop $0
  pop $2
  pop $R1
  pop $R0
  pop $3
  pop $4
  return
NoFound:
  pop $4
  pop $3
  pop $0
  pop $2
  pop $R1
  pop $R0
  push "installed"
  push "java"
  push "no"
  push "0"
FunctionEnd